---
layout: post
title:  Oh GPG
since:   2014-10-20 13:01:23
date:   2014-10-22 10:10:34
category: tools
type: tools
tags:
 - encryption
 - decryption
 - cryptography
 - cybersecurity
 - security
 - tool
 - gpg
image: https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/twitter-cards/gpglock_thumb.png
twitter:
  card: summary
  image: https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/twitter-cards/gpglock_thumb.png
og:
  type: article
  article: #see ogp.me/#types
    author: https://www.facebook.com/david.asabina
    section: Cybersecurity
description: "Some GPG tricks everyone should know and master, because crypting is something that you should take serious"
---
To encrypt and decrypt my secret messages on my box I use GPG. This post is
hopefully going to jog the memory of senile future me (or just future me on a
day on which I happen to be hammered and need to perform this trick). Perhaps
there is something here that may be of any use to other folks as well 
:beer:.

<div class="element">
  <iframe src="//giphy.com/embed/Gz1Ebo1yJmC9q" width="480" height="288" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
</div>

## Get Started

In order to start using GPG one needs generate a public and secret keys. The
public key may be shared with the whole world and will allow others to encrypt
messages intended for the holder of the secret key. Once a message is encrypted
a secret key is required to decrypt the message which is why one is to take the
protection of its secret key seriously. Start generating a GPG keypair by
running the following command:
{% highlight bash %}
gpg --gen-key
{% endhighlight %}

Remember to set a passphrase for the pair. Often enough the keys are used to
sign documents so remember that it is often a means for authenticating a user.
Unless a passphrase is set, it is very easy for anyone who acquires the secret
key to impersonate the identity associated to the key. With a proper passphrase
set the party acquiring the key still needs to figure out what the passphrase
is and depending on the type of key it may take them some time.

<div class="element img">
  <img src="https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/screenshots/gpg_gen_key.gif" alt="generating a GPG key" />
</div>

## Encrypt it

In order to lock up a certain piece of information we can simply pipe it into
the `gpg` tool and instruct it how to encrypt it and where to store the 
ciphertext. To get started a file is created with the following shell command
that contains the text `launch codes` :rocket:.

{% highlight sh %}
echo "launch codes" > code.in.txt
{% endhighlight %}

The following command basically encrypts the string in the message file and
stores the ciphertext into the file `cipher.gpg`. The recipient 
`vid@bina.me` has been specified in order to instruct whom is to be able 
to decrypt the ciphertext. For the encrypted launch codes the given recipient
will be the only person who needs to know so&hellip; yeah&hellip; secrets
should be encrypted not just `chown`ed :closed_lock_with_key:.

{% highlight sh %}
cat code.in.txt | gpg -e -r vid@bina.me -o cipher.gpg
{% endhighlight %}

Provided that the document needs to be sent to a few third parties of which we
happen to have the public key one can include them as recipients. The
following example 

{% highlight sh %}
cat code.in.txt | gpg -e \
  -r harold@finch.me \
  -r elliot@allsafe.secure \
  -o cipher.gpg
{% endhighlight %}

## Decrypt it

Now that the ciphertext is generated one may decrypt it with `gpg` as well.
{% highlight sh %}
gpg -d cipher.pgp > code.out.txt
{% endhighlight %}

Now the launch codes are known and available in `code.out.txt`. API keys are
launch codes anyways :wink:.

<div class="element">
  <iframe src="//giphy.com/embed/LjQmZzYuARJF6" width="480" height="217" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
</div>

<!--
## Signing
-->


## The Agent
Sometimes one may fire up an application that may need to make multiple calls
to encrypted resources. Decrypting all the data every time would present a most
annoying passphrase prompt every darn time.

<div class="element img">
  <img src="https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/screenshots/gpgagent-mutt.png" alt="GPGagent popping up to decrypt a password needed by Mutt" />
</div>

The agent allows you to enter the passphrase once within a session and will
remember and handle the passphrase dance for as long as the passphrase happens
to persist in the cache. In the case of mutt that might mean happy mailing 
without having to enter a passwords every time a call is made. Pretty sweet
:smile:.

The entire agent business works in the following manner:

  - invoke the agent daemon (which runs in the background, presents the 
  passphrases for keys it has stored in cache and prompting you for the 
  passphrase it hasn't yet stored)
  - set up a terminal to act as the front-end

### Simplified
In order to simplify this entire process I have written a small shell script
to handle all of the daemon summoning and front-end spawning work.

Running `start-gpg-agent` checks if the info file doesn't yet exist and 
then spawns the daemon.

Basically I use the helper `make-gpg-tty` to configure my current terminal
as the GPG-Agent front-end. Mind you that you should only configure one 
terminal as the front-end in order to avoid weird :shit:. 
That is why `make-gpg-tty` stores the agent terminal number to a file and
only links the current terminal as the front-end if there has not already been
another terminal linked for this chore.

In order to disconnect my current terminal I can use `unmake-gpg-tty` and
if I want to stop the GPG-Agent I could run `stop-gpg-agent`.

<script src="https://gist.github.com/vidbina/bde1495a6d2a047ada09.js"></script>

# Read
  - [invoke-gpg-agent](https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html)
  - [signing](https://www.gnupg.org/gph/en/manual/x135.html)
  - [cheatsheet](http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/)
  - [gnupg Manual][gnupg-manual]

[gnupg-manual]: https://www.gnupg.org/gph/en/manual.html
