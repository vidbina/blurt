---
layout: post
title: From btrfs to zfs
description: |
  Add a description to this article here. Keep it short and sweet.
date:  2017-09-07 11:00:08 +0000
type: tools # for icon
category: tools # for url
tags:
 - tools
 - autogenerated
og:
  type: article # http://ogp.me/#types
#  og:type: # 
#   - og:value: value
#     og:attr: foo
#   - og:value: value
#image: https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/brexit.png
#twitter:
#  card: summary
#  image: https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/brexit.png
head: mugshot
---
# Basics

List the block devices

    lsblk

List all the known partitions

    fdisk -l

Figure out sizes of directories, only recursing to a depth of 1 levels deep

    du -d 1 -h /

## Partitions

One may create partition tables on a disk using `fdisk` as demonstrated in the
screencast below.

<div class="element">
  <script src="https://asciinema.org/a/ubDxMlMqWFOq7UtalLFFPhF7P.js" id="asciicast-ubDxMlMqWFOq7UtalLFFPhF7P" async></script>
</div>

An unencrypted partition is easily accessible by mounting the block device.
Encrypted partitions, however; would need to be unlocked first which would
subsequently yield a mapping which is mountable. Understanding this order of
steps makes the entire ordeal much easier to reason about -- encrypted volumes
need to be unlocked prior to them even being mountable :thought_balloon:.

For a brief overview, the following list captures the step involved in the
usage of a volume where :key: marks the steps required with encrypted volumes
and :construction: marks the steps required only at the setup of a volume:

 - luksFormat: prep volume for encryption :key: :construction:
 - format volume to a filesystem :construction:
 - unlock/luksOpen :key:
 - mount
 - read/write
 - unmount
 - lock/luksClose :key:

The snippet below lists the output of `lsblk /dev/sda` which provides an
some insights as to how an LUKS encrypted volume `sda1` relates to its
non-encrypted counterpart `sda2`.

```
NAME                 MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda                    8:0    0 476.9G  0 disk  
├─sda1                 8:1    0   300G  0 part  
│ └─luks-xyz
│                    254:4    0   300G  0 crypt /run/media/a
└─sda2                 8:2    0 176.9G  0 part  /run/media/b
```

> Note that both volumes in the lsblk listing are mounted. In order to arrive
at a scenario that is somewhat similar to the one presented in the listing
above, I'll mention how to format unencrypted and encrypted volumes and mount
these in the sections that follow :point_down:.

### Basic (Unencrypted)

Formatting partition `/dev/sda2` to the ext3 filesystem may be done as follows

    sudo mkfs.ext3 /dev/sda2

which is a command that you probably wouldn't need on a day to day basis but
is still fundamental enough to be worth remembering. :star:

Once a volume is formatted, it may be mounted by

    sudo mount /dev/sda2/ /my/mountpoint

which will mount the disk to `/my/mountpoint` or

    udisksctl mount -b /dev/sda2

which will mount the the block device designated by the flag `-b` and referred
to as `/dev/sda2` to a mountpoint set up by udisksctl and subsequently printed
to the terminal after the mount is completed.

Unmount block device `/dev/sda2` by running

    sudo umount /dev/sda2

or by running

    udisksctl unmount -b /dev/sda2

where `-b` indicates that the token that follows represents the reference to
the block device we intend to unmount.

> :bulb: Note how `udisksctl` works without `sudo`. If at all possible, I avoid
using `sudo` as much as I can :wink:[^sudo].

[^sudo]: Using `sudo` and fainting a few seconds later effectively leaves a terminal that will probably allow unfettered sudo foolery for the next 50-odd seconds or so exposed to the next person walking by. :boom: This is bad, M'kay?!?

### Encrypted

One may setup encryption on partition `/dev/sda1` by using the `cryptsetup`
tool as follows

    sudo cryptsetup luksFormat /dev/sda1

which will completely wipe the data off the partition, request a passphrase and
subsequently prep the volume for use as -- an encrypted volume. :raised_hands:

At this stage we have setup a partition to be used with LUKS encryption.  There
is no filesystem (ext3, btrfs, zfs, or whatever) setup on the volume yet so
don't get confused by the "format" in "luksFormat", the drive isn't really
formatted for a specific filesystem yet.

In order to use our partition we need to unlock it by

    sudo cryptsetup luksOpen /dev/sda1 some-alias

which will request a passphrase :key:, open the the volume
and map it to the arbitrary name `some-alias`, or

    udisksctl unlock -b /dev/sda1

which will request a passphrase and unlock the device, subsequently returning
the path to which the volume was mapped (e.g.: `/dev/dm-x`).

Now that the volume is unlocked, one may treat the mapping as a conventional
drive -- fit for formatting, mounting, reading, writing and unmounting. :floppy_disk:

From this point on, one may use the mapping reference `/dev/dm-x` in a similar
manner as we used the block device reference `/dev/sda2` in the examples to
format the unencrypted volume. So now you know how to format, mount and unmount
the encrypted volume as well. :wink:

An unmounted disk is still exposed until it is locked again, so when done
don't forget to lock the device by either running

    sudo cryptsetup luksClose some-alias

where the alias is provided that the volume was opened as, or

    udisksctl lock -b /dev/sda1

which is hopefully self-explantory at this stage.

> :bulb: Learning how to use `udisksctl` makes life slightly easier since you
can use the same tool for unlocking, mount, unmounting and ejecting medium
which basically covers your entire day-to-day disk usage workflow. Without
`udisksctl` one would otherwise have to remember how to use
`cryptsetup luksOpen`, `mount` , `umount` along with a method for safely
unplugging the storage device and the worst part is that one would need to
elevate itself to sudo privileges to run these commands whereas `udisksctl`
just works without any special privileges :wink:. The biggest downside to
udisksctl is that I haven't figured out how to explicitly provide custom
mountpoints while invoking the command.

A great feature of udisksctl is that it makes it pretty easy to safely
disconnect or eject a medium from a system. Running

    udisksctl power-off -b /dev/sda

allows one to disconnect the entire device `/dev/sda`. Note that I didn't use
the path to a partition, but the path to the entire device. This is basically
the eject switch to use with your removable media. :rocket::seat:

## Backups

### For storage on unencrypted medium

Create `-c` an archive of my home directory `~`, using the bzip2 filter `-j`,
and output this archive's contents to stdout, pipe this data to gpg to encrypt
this data with a symmetric cipher `-c` and redirect the output of gpg to a file
in `/tmp/mountpoint` matching the pattern `backup_*.tbz2.gpg` where the asterisk
represents the date at which the archive was created.

    tar cjf - ~ | gpg --ciper-algo AES -c - > /tmp/mountpoint/backup_`date +"%Y%m%d%H%M"`.tbz2.gpg

> NOTE: In my case, this produces a tarball over 100G in size, which I would
have to unpack in its entirety and decrypt in order to do anything useful with
it.

Read the archive, pipe it into gpg which pipes its output to stdout where
we decompress `-d` the bzip2 `-j` archive into

    cat backup_DATE.tbz2.gpg | gpg - | tar djf -

### For storage on encrypted medium

Archive `-a` sync a file with rsync, which basically preserves everything except
hardlinks, present information in a human-readable format `-h` and provide a
progress report `--progress`.

    rsync -ah --progress $SOURCE $DESTINATION

# Links

 - https://wiki.gentoo.org/wiki/Dm-crypt_full_disk_encryption
 - https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions
 - https://superuser.com/questions/205223/pros-and-cons-of-bzip-vs-gzip
 - https://xkcd.com/936/
 - https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions
 - https://en.wikipedia.org/wiki/Trim_(computing)
 - http://www.linfo.org/journaling_filesystem.html
 - https://unix.stackexchange.com/questions/161915/change-password-on-a-luks-filesystem-without-knowing-the-password#161920
 - https://www.thegeekstuff.com/2016/03/cryptsetup-lukskey
[10-cryptsetup-examples][https://www.thegeekstuff.com/2016/03/cryptsetup-lukskey]
