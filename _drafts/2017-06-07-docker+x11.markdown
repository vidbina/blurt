---
layout: post
title: Docker+X11
description: |
  Add a description to this article here. Keep it short and sweet.
date:  2017-06-07 18:48:31 +0000
type: tools # for icon
category: tools # for url
tags:
 - tools
 - autogenerated
og:
  type: article # http://ogp.me/#types
#  og:type: # 
#   - og:value: value
#     og:attr: foo
#   - og:value: value
#image: https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/brexit.png
#twitter:
#  card: summary
#  image: https://s3.eu-central-1.amazonaws.com/vid.bina.me/img/brexit.png
head: mugshot
---
I've switched to NixOS in to avoid all of the hassle I formerly had in keeping my
Linux setup clean :wink:. NixOS packages will suffice for most of my activities,
however; containers are just too portable to ignore the option.

The idea that I could share images and be more or less guarenteed of the fact that
anyone using the image would have a similar environment, ergo eliminating a lot of
oh-shit-it-worked-on-my-box issues, is too valuable to ignore.

Jess Frazelle has done some exceptional work in getting a set of Dockerfiles out
to the public that should make it easy to get containers spawned for most of the
tools what we need. Even for applications that boast X11 GUI's.

I started off playing with the images by attempting to build the firefox image
and ran into the following problem.

```
(firefox:59): Gtk-WARNING **: Locale not supported by C library.
	Using the fallback 'C' locale.
No protocol specified
Unable to init server: Broadway display type not supported: unix:0
Error: cannot open display: unix:0
```

with `DISPLAY=unix:0` or `DISPLAY=unit:0.0`.

With `DISPLAY=:0` probably attempts to setup a connection through SSL which isn't
supported on my machine for good reason.


```
(firefox:55): Gtk-WARNING **: Locale not supported by C library.
	Using the fallback 'C' locale.
No protocol specified
Unable to init server: Could not connect: Connection refused
Error: cannot open display: :0
root@f861071ff35a:/# export DISPLAY=unix:0
root@f861071ff35a:/# firefox
```

This problem may in several cases be resolved by adding the docker instance's hostname
to the X11 access control list.


```
xhost +local:`docker inspect --format {{.Config.Hostname}} NAME_OF_CONTAINER`
```

> In NixOS `xhost` is part of the `xorg` package. Just add `xorg.xhost` as one of the
packages :wink: as demonstrated below:
```nix
{ config, pkgs, ... }:

{
  environment.systemPackages = with pkgs; [
    # other packages
    xorg.xhost
  ];
}
```


where `NAME_OF_CONTAINER` is substituted for the id or name of the container of
interest.

When using Jess' [.dockerfunc](https://raw.githubusercontent.com/jessfraz/dotfiles/master/.dockerfunc)
in conjunction with her dockerfiles, you can safely assume that the firefox container will
be spawned with the `firefox` name. The docker instance will subsequently adopt.
.

<!--The problem is that the name of the container may not always be the same. When using
Jess's dockerfiles, for instance, the container could be spawned under a different name
after you've rebuild the little suckers. In that case one would have to remove the old
access control rule and provide another one, godforbid you allow all local connections
by running ```xhost +local```.-->

Another approach mentioned in a [ROS](http://wiki.ros.org/docker/Tutorials/GUI) tutorial
proposes mounting the /etc/passwd, /etc/group and /etc/shadow directories into the container
as read-only mount points. The problem with this approach is that the firefox container is
suddenly required to provide the same startup shell and login directory that are specified in
/etc/passwd leading to a tighter coupling between the application container and the host
environment which I consider unfavorable.

After screwing around with my setup for a while, I ran into the weird situation where I spent
quite a bit of time waiting for firefox to get started which only dissappeared after...

## Links

- http://wiki.ros.org/docker/Tutorials/GUI
- https://blog.jessfraz.com/post/docker-containers-on-the-desktop/
